import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.animation import FuncAnimation
from IPython.display import HTML

# Parameters
k = 2.0  # Wave number (same for quantum and EM wave)
omega = 1.0  # Angular frequency
A = 1.0  # Amplitude for wavefunction
E0 = 1.0  # Amplitude for electric field
c = 1.0  # Speed of light (normalized, B0 = E0/c)
z = np.linspace(0, 4*np.pi, 1000)  # Spatial coordinate (x for quantum, z for EM)

# Set up figure with two subplots
fig = plt.figure(figsize=(12, 5))

# Left subplot: Real and imaginary parts of wavefunction (2D)
ax1 = plt.subplot(121)
line_real, = ax1.plot([], [], label='Real(ψ): cos(kx - ωt)', color='blue')
line_imag, = ax1.plot([], [], label='Imag(ψ): sin(kx - ωt)', color='red')
ax1.set_xlim(0, 4*np.pi)
ax1.set_ylim(-1.5*A, 1.5*A)
ax1.set_xlabel('x')
ax1.set_ylabel('ψ components')
ax1.set_title('Quantum Wavefunction Components')
ax1.legend()
ax1.grid(True)

# Right subplot: 3D plot for EM wave E and B fields
ax2 = plt.subplot(122, projection='3d')
line_E, = ax2.plot([], [], [], label='E field (x-dir)', color='blue')
line_B, = ax2.plot([], [], [], label='B field (y-dir)', color='red')
ax2.set_xlim(-1.5*E0, 1.5*E0)  # x-axis for E
ax2.set_ylim(-1.5*E0/c, 1.5*E0/c)  # y-axis for B
ax2.set_zlim(0, 4*np.pi)  # z-axis for propagation
ax2.set_xlabel('E_x')
ax2.set_ylabel('B_y')
ax2.set_zlabel('z (propagation)')
ax2.set_title('EM Wave: E and B Fields in 3D')
ax2.legend()

# Initialization function
def init():
    line_real.set_data([], [])
    line_imag.set_data([], [])
    line_E.set_data_3d([], [], [])
    line_B.set_data_3d([], [], [])
    return line_real, line_imag, line_E, line_B

# Animation function
def animate(t):
    # Quantum wavefunction: ψ(x, t) = A e^{i(kx - ωt)}
    psi = A * np.exp(1j * (k * z - omega * t))
    real_psi = np.real(psi)
    imag_psi = np.imag(psi)
    
    # EM wave: E = E₀ cos(kz - ωt) \hat{x}, B = (E₀/c) cos(kz - ωt) \hat{y}
    E_x = E0 * np.cos(k * z - omega * t)  # E field along x
    B_y = (E0 / c) * np.cos(k * z - omega * t)  # B field along y
    
    # Update wavefunction plot (2D)
    line_real.set_data(z, real_psi)
    line_imag.set_data(z, imag_psi)
    
    # Update EM wave plot (3D)
    # E field: (E_x, 0, z)
    line_E.set_data_3d(E_x, np.zeros_like(z), z)
    # B field: (0, B_y, z)
    line_B.set_data_3d(np.zeros_like(z), B_y, z)
    
    return line_real, line_imag, line_E, line_B

# Create animation
ani = FuncAnimation(fig, animate, init_func=init, frames=np.linspace(0, 2*np.pi, 100), 
                    interval=50, blit=True)

# Display animation in Colab with looping
plt.tight_layout()
HTML(ani.to_jshtml(fps=20, default_mode='loop'))
