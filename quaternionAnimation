# Install required libraries in Colab
!pip install numpy matplotlib ipywidgets

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.animation import FuncAnimation
from IPython.display import HTML
import ipywidgets as widgets
from ipywidgets import interact, interactive, fixed, FloatSlider, Button, HBox, VBox

# Quaternion functions
def normalize_quaternion(w, x, y, z):
    norm = np.sqrt(w**2 + x**2 + y**2 + z**2)
    if norm == 0:
        return 1.0, 0.0, 0.0, 0.0
    return w/norm, x/norm, y/norm, z/norm

def quaternion_multiply(q, p):
    w1, x1, y1, z1 = q
    w2, x2, y2, z2 = p
    w = w1*w2 - x1*x2 - y1*y2 - z1*z2
    x = w1*x2 + x1*w2 + y1*z2 - z1*y2
    y = w1*y2 - x1*z2 + y1*w2 + z1*x2
    z = w1*z2 + x1*y2 - y1*x2 + z1*w2
    return w, x, y, z

def quaternion_conjugate(w, x, y, z):
    return w, -x, -y, -z

def rotate_point(point, q):
    p = (0, point[0], point[1], point[2])
    q_inv = quaternion_conjugate(*q)
    qp = quaternion_multiply(q, p)
    result = quaternion_multiply(qp, q_inv)
    return np.array([result[1], result[2], result[3]])

# Set up figure and 3D axis
fig = plt.figure(figsize=(8, 8))
ax = fig.add_subplot(111, projection='3d')

# Plot unit sphere (wireframe)
u = np.linspace(0, 2*np.pi, 20)
v = np.linspace(0, np.pi, 20)
x = np.outer(np.cos(u), np.sin(v))
y = np.outer(np.sin(u), np.sin(v))
z = np.outer(np.ones(np.size(u)), np.cos(v))
ax.plot_wireframe(x, y, z, color='gray', alpha=0.2)

# Initial point
initial_point = np.array([1.0, 0.0, 0.0])
ax.scatter([initial_point[0]], [initial_point[1]], [initial_point[2]], color='blue', s=50, label='Starting Point')

# Initialize trajectory, current point, and great circle
trajectory, = ax.plot([], [], [], 'r-', label='Trajectory', linewidth=2)
current_point, = ax.plot([], [], [], 'ro', label='Current Point', markersize=10)
great_circle, = ax.plot([], [], [], 'g--', label='Great Circle', alpha=0.5)

# Set plot limits and labels
ax.set_xlim([-1.2, 1.2])
ax.set_ylim([-1.2, 1.2])
ax.set_zlim([-1.2, 1.2])
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.legend()

# Global state
traj_points = [initial_point.copy()]
animating = False
animation = None

# Update plot function
def update_plot(w, x, y, z, animating=False):
    global traj_points
    q = normalize_quaternion(w, x, y, z)
    rotated = rotate_point(initial_point, q)
    
    # Update trajectory
    if animating:
        traj_points.append(rotated)
        if len(traj_points) > 100:  # Limit trajectory length
            traj_points.pop(0)
    else:
        traj_points = [initial_point.copy(), rotated]
    
    traj_array = np.array(traj_points)
    trajectory.set_data_3d(traj_array[:, 0], traj_array[:, 1], traj_array[:, 2])
    
    # Update current point
    current_point.set_data_3d([rotated[0]], [rotated[1]], [rotated[2]])
    
    # Plot great circle (plane perpendicular to rotation axis)
    axis = np.array([x, y, z])
    norm = np.sqrt(x**2 + y**2 + z**2)
    if norm > 0:
        axis = axis / norm
        t = np.linspace(0, 2*np.pi, 100)
        v1 = np.cross(axis, [1, 0, 0] if np.abs(axis[0]) < 0.9 else [0, 1, 0])
        v1 = v1 / np.linalg.norm(v1)
        v2 = np.cross(axis, v1)
        circle = np.cos(t)[:, None] * v1 + np.sin(t)[:, None] * v2
        great_circle.set_data_3d(circle[:, 0], circle[:, 1], circle[:, 2])
    else:
        great_circle.set_data_3d([], [], [])
    
    # Update title
    ax.set_title(f'Quaternion: w={q[0]:.2f}, x={q[1]:.2f}i, y={q[2]:.2f}j, z={q[3]:.2f}k')
    
    if not animating:
        fig.canvas.draw_idle()

# Animation function
def animate(frame):
    theta = (frame % 100) * 2 * np.pi / 100
    w = np.cos(theta/2)
    x = 0.0
    y = 0.0
    z = np.sin(theta/2)  # Z-axis rotation (great circle in xy-plane)
    update_plot(w, x, y, z, animating=True)
    return trajectory, current_point, great_circle

# Create sliders
w_slider = FloatSlider(min=-1.0, max=1.0, step=0.01, value=1.0, description='w')
x_slider = FloatSlider(min=-1.0, max=1.0, step=0.01, value=0.0, description='x')
y_slider = FloatSlider(min=-1.0, max=1.0, step=0.01, value=0.0, description='y')
z_slider = FloatSlider(min=-1.0, max=1.0, step=0.01, value=0.0, description='z')

# Interactive slider function
def slider_update(w, x, y, z):
    update_plot(w, x, y, z, animating=False)

# Create interactive widget
interactive_plot = interactive(slider_update, w=w_slider, x=x_slider, y=y_slider, z=z_slider)

# Animation toggle button
animate_button = Button(description='Animate')

def toggle_animation(button):
    global animating, animation
    if animating:
        animating = False
        animate_button.description = 'Animate'
    else:
        animating = True
        animate_button.description = 'Stop'
        # Run animation
        ani = FuncAnimation(fig, animate, frames=100, interval=50, blit=False, repeat=True)
        display(HTML(ani.to_jshtml()))  # Display animation in Colab

animate_button.on_click(toggle_animation)

# Display widgets and initial plot
display(VBox([interactive_plot, animate_button]))

# Initial plot
update_plot(1.0, 0.0, 0.0, 0.0)
plt.show()
